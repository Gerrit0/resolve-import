{"version":3,"file":"t.js","sourceRoot":"","sources":["t.ts"],"names":[],"mappings":";;;AAAA,0CAAqC;AACrC,6BAAmC;AAE5B,MAAM,OAAO,GAAG,KAAK,EAAE,KAAc,EAAE,EAAE;IAC9C,MAAM,KAAK,GAAG,KAAK;QACjB,CAAC,CAAC,CAAC,KAAK,CAAC;QACT,CAAC,CAAC,CAAC,MAAM,IAAA,kBAAO,EAAC,SAAS,GAAG,eAAe,CAAC,CAAC,CAAC,MAAM,CACjD,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,CAC7B,CAAA;IACL,MAAM,GAAG,GAAG,MAAM,OAAO,CAAC,GAAG,CAC3B,KAAK,CAAC,GAAG,CAAC,KAAK,EAAC,GAAG,EAAC,EAAE;QACpB,OAAO;YACL,GAAG;YACH,MAAM,MAAM,CAAC,GAAG,CAAC;iBACd,IAAI,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,MAAM,CAAC;iBAC5B,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;YAClC,MAAM,MAAM,CAAC,GAAG,GAAG,SAAS,CAAC;iBAC1B,IAAI,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,MAAM,CAAC;iBAC5B,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;YAClC,MAAM,MAAM,CAAC,GAAG,GAAG,aAAa,CAAC;iBAC9B,IAAI,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,MAAM,CAAC;iBAC5B,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;SACnC,CAAA;IACH,CAAC,CAAC,CACH,CAAA;IACD,OAAO,MAAM,CAAC,WAAW,CACvB,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE;QACvB,OAAO,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IAC/C,CAAC,CAAC,CACH,CAAA;AACH,CAAC,CAAA;AA3BY,QAAA,OAAO,WA2BnB;AAED,MAAM,MAAM,GAAG,CAAC,CAA4B,EAAE,EAAE,CAC9C,OAAO,CAAC,KAAK,QAAQ;IACnB,CAAC,CAAC,CAAC;IACH,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC;QACzB,CAAC,CAAC,CAAC;QACH,CAAC,CAAC,MAAM,CAAC,IAAA,mBAAa,EAAC,CAAC,CAAC,CAAC,CAAA;AAE9B,IAAI,OAAO,CAAC,IAAI,KAAK,MAAM,EAAE;IAC3B,IAAA,eAAO,EAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAClC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAC1C,CAAA;CACF","sourcesContent":["import { readdir } from 'fs/promises'\nimport { pathToFileURL } from 'url'\n\nexport const testAll = async (which?: string) => {\n  const types = which\n    ? [which]\n    : (await readdir(__dirname + '/node_modules')).filter(\n        f => f && !f.startsWith('.')\n      )\n  const res = await Promise.all(\n    types.map(async pkg => {\n      return [\n        pkg,\n        await import(pkg)\n          .then(({ whoami }) => whoami)\n          .catch(e => [e.code, e.message]),\n        await import(`${pkg}/sub.js`)\n          .then(({ whoami }) => whoami)\n          .catch(e => [e.code, e.message]),\n        await import(`${pkg}/missing.js`)\n          .then(({ whoami }) => whoami)\n          .catch(e => [e.code, e.message]),\n      ]\n    })\n  )\n  return Object.fromEntries(\n    res.map(([p, i, s, m]) => {\n      return [p, [tofurl(i), tofurl(s), tofurl(m)]]\n    })\n  )\n}\n\nconst tofurl = (s: string | [string, string]) =>\n  typeof s !== 'string'\n    ? s\n    : s.startsWith('file://')\n    ? s\n    : String(pathToFileURL(s))\n\nif (require.main === module) {\n  testAll(process.argv[2]).then(res =>\n    console.log(JSON.stringify(res, null, 2))\n  )\n}\n"]}